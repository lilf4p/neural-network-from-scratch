Index: src/layers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport src.activations as af\r\nimport src.regularizers as reg\r\n\r\n\r\nclass Layer:\r\n    \"\"\"Just a fully connected layer.\"\"\"\r\n \r\n    def __init__(\r\n        self,\r\n        units: int,\r\n        input_shape: int,\r\n        activation_function:\r\n        af.Activation,\r\n        bias=0.5,\r\n        regularizer : reg.Regularizer = None\r\n    ) -> None:\r\n\r\n        # define shape of layer and number of units\r\n        self.output_shape = units\r\n        self.units = units\r\n        self.activation = activation_function\r\n        self.regularizer = regularizer\r\n\r\n        # randomly init weight matrix and biases\r\n        self.W = np.random.uniform(low=-0.05, high=0.05, size=(input_shape, units))\r\n        self.bias = np.random.uniform(low=-0.01, high=0.01, size=(units, 1))\r\n        self.last_input = np.NaN\r\n        self.last_net = np.NaN\r\n        self.last_output = np.NaN\r\n        self.last_delta = np.zeros(self.W.shape) # last delta used for momentum\r\n    def net(self, x):\r\n        return (self.W.T @ x) + self.bias\r\n  \r\n    def output(self, x):\r\n        \"\"\"Compute layer's output and save it.\"\"\"\r\n        self.last_input = np.copy(x)\r\n        self.last_net = self.net(x)\r\n        self.last_output = self.activation.activation(self.last_net)\r\n\r\n        return self.last_output\r\n\r\n    def update_weights(self, deltas, eta, nesterov):\r\n        # compute dl to update weights and deltas to propagate back.\r\n        dl = deltas * self.activation.derivative(self.last_net)\r\n        delta_w = self.last_input @ dl.T\r\n        deltas_prop = self.W @ dl\r\n\r\n        if self.regularizer:\r\n            self.W -= eta * delta_w + self.regularizer.gradient(self.W) + nesterov * self.last_delta\r\n            self.last_delta =  eta * delta_w + self.regularizer.gradient(self.W) + nesterov * self.last_delta\r\n        else:\r\n            self.W -= eta * delta_w + nesterov * self.last_delta\r\n            self.last_delta = eta * delta_w + nesterov * self.last_delta\r\n        self.bias -= dl * eta\r\n\r\n        return deltas_prop\r\n\r\n    def __str__(self) -> str:\r\n        return f\"Weights matrix = {self.W} \\n, biases = {self.bias}\"\r\n\r\n\r\nclass InputLayer(Layer):\r\n    def __init__(self, units: int) -> None:\r\n        self.output_shape = units\r\n        self.units = units\r\n\r\n    def output(self, x):\r\n        return x\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/layers.py b/src/layers.py
--- a/src/layers.py	
+++ b/src/layers.py	
@@ -45,13 +45,14 @@
         dl = deltas * self.activation.derivative(self.last_net)
         delta_w = self.last_input @ dl.T
         deltas_prop = self.W @ dl
-
+        if nesterov:
+            delta_w = delta_w + nesterov * self.last_delta
+            self.last_delta = delta_w
         if self.regularizer:
-            self.W -= eta * delta_w + self.regularizer.gradient(self.W) + nesterov * self.last_delta
-            self.last_delta =  eta * delta_w + self.regularizer.gradient(self.W) + nesterov * self.last_delta
+            self.W -= eta * delta_w + self.regularizer.gradient(self.W)
+
         else:
             self.W -= eta * delta_w + nesterov * self.last_delta
-            self.last_delta = eta * delta_w + nesterov * self.last_delta
         self.bias -= dl * eta
 
         return deltas_prop
Index: notebooks/tests.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"import sys\\n\",\r\n    \"sys.path.append('../')\\n\",\r\n    \"sys.path.append('../src/')\\n\",\r\n    \"\\n\",\r\n    \"import seaborn as sns\\n\",\r\n    \"import matplotlib.pyplot as plt\\n\",\r\n    \"import matplotlib as mpl\\n\",\r\n    \"import pandas as pd\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"\\n\",\r\n    \"from src.utils import load_moons, load_monk1, load_mnist\\n\",\r\n    \"from src.network import Network\\n\",\r\n    \"from src.activations import ReLU, Tanh, Sigmoid\\n\",\r\n    \"from src.losses import MeanSquaredError\\n\",\r\n    \"from src.metrics import BinaryAccuracy, MulticlassAccuracy, MeanEuclideanError\\n\",\r\n    \"from src.regularizers import L2\\n\",\r\n    \"from sklearn.metrics import accuracy_score\\n\",\r\n    \"from sklearn.preprocessing import MinMaxScaler\\n\",\r\n    \"from sklearn.model_selection import train_test_split\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"x_train, x_val, x_test, y_train, y_val, y_test = load_moons(validation=True, noise=0.2)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"model = Network(2)\\n\",\r\n    \"model.add_layer(8, ReLU())\\n\",\r\n    \"model.add_layer(1, Tanh())\\n\",\r\n    \"\\n\",\r\n    \"# create stats\\n\",\r\n    \"stats = model.train(train=(x_train, y_train), validation=(x_val, y_val), metric=BinaryAccuracy(), loss=MeanSquaredError(), epochs=500, eta=0.01, nesterov=0.5)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"fig, axs = plt.subplots(1, 2, figsize=(15, 5))\\n\",\r\n    \"\\n\",\r\n    \"sns.lineplot(stats['train_loss'], ax=axs[0])\\n\",\r\n    \"sns.lineplot(stats['val_loss'], ax=axs[0])\\n\",\r\n    \"sns.lineplot(stats['train_acc'], ax=axs[1])\\n\",\r\n    \"sns.lineplot(stats['val_acc'], ax=axs[1])\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"predictions = model.multiple_outputs(x_test)\\n\",\r\n    \"\\n\",\r\n    \"accuracy_score(y_test.flatten(), np.round(predictions.flatten()))\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"x_train, x_val, x_test, y_train, y_val, y_test = load_monk1()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"model = Network(17)\\n\",\r\n    \"model.add_layer(6, ReLU())\\n\",\r\n    \"model.add_layer(1, Tanh())\\n\",\r\n    \"stats = model.train((x_train, y_train), (x_test, y_test), metric=BinaryAccuracy(), loss=MeanSquaredError(), epochs=1000, nesterov=0.5)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"fig, axs = plt.subplots(1, 2, figsize=(15, 5))\\n\",\r\n    \"\\n\",\r\n    \"sns.lineplot(stats['train_loss'], ax=axs[0])\\n\",\r\n    \"sns.lineplot(stats['val_loss'], ax=axs[0])\\n\",\r\n    \"sns.lineplot(stats['train_acc'], ax=axs[1])\\n\",\r\n    \"sns.lineplot(stats['val_acc'], ax=axs[1])\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"x_train, x_test, y_train, y_test = load_mnist()\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"model = Network(64)\\n\",\r\n    \"model.add_layer(16, ReLU())\\n\",\r\n    \"model.add_layer(10, Sigmoid(0.001))\\n\",\r\n    \"stats = model.train(x_train, y_train, x_test, y_test, metric=MulticlassAccuracy(), loss=MeanSquaredError(), epochs=500)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"fig, axs = plt.subplots(1, 2, figsize=(15, 5))\\n\",\r\n    \"\\n\",\r\n    \"sns.lineplot(stats['train_loss'], ax=axs[0])\\n\",\r\n    \"sns.lineplot(stats['val_loss'], ax=axs[0])\\n\",\r\n    \"sns.lineplot(stats['train_acc'], ax=axs[1])\\n\",\r\n    \"sns.lineplot(stats['val_acc'], ax=axs[1])\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"def load_cup(test_size=0.2):\\n\",\r\n    \"    df = pd.read_csv(\\\"../data/cup/cup.train\\\", comment=\\\"#\\\", index_col='id', skipinitialspace=True)\\n\",\r\n    \"    scaler = MinMaxScaler()\\n\",\r\n    \"    scaled = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\\n\",\r\n    \"    x_train, x_val, y_train, y_val = train_test_split(scaled.drop([\\\"ty\\\", 'tx'], axis=1).values, scaled[['tx','ty']].values, test_size=0.25, random_state=42)\\n\",\r\n    \"    x_train = np.expand_dims(x_train, 2)\\n\",\r\n    \"    x_val = np.expand_dims(x_val, 2)\\n\",\r\n    \"    y_train = np.expand_dims(y_train, 2)\\n\",\r\n    \"    y_val = np.expand_dims(y_val, 2)\\n\",\r\n    \"\\n\",\r\n    \"    return x_train, x_val, y_train, y_val\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 23,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"(1119, 9, 1)\"\r\n     },\r\n     \"execution_count\": 23,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"x_train, x_val, y_train, y_val = load_cup()\\n\",\r\n    \"x_train.shape\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 25,\r\n   \"outputs\": [\r\n    {\r\n     \"ename\": \"NameError\",\r\n     \"evalue\": \"name 'L2' is not defined\",\r\n     \"output_type\": \"error\",\r\n     \"traceback\": [\r\n      \"\\u001B[1;31m---------------------------------------------------------------------------\\u001B[0m\",\r\n      \"\\u001B[1;31mNameError\\u001B[0m                                 Traceback (most recent call last)\",\r\n      \"Cell \\u001B[1;32mIn[25], line 7\\u001B[0m\\n\\u001B[0;32m      3\\u001B[0m model\\u001B[38;5;241m.\\u001B[39madd_layer(\\u001B[38;5;241m8\\u001B[39m, ReLU())\\n\\u001B[0;32m      4\\u001B[0m model\\u001B[38;5;241m.\\u001B[39madd_layer(\\u001B[38;5;241m2\\u001B[39m, Sigmoid())\\n\\u001B[0;32m      6\\u001B[0m stats \\u001B[38;5;241m=\\u001B[39m model\\u001B[38;5;241m.\\u001B[39mtrain((x_train, y_train), (x_val, y_val), metric\\u001B[38;5;241m=\\u001B[39mMeanEuclideanError(), loss\\u001B[38;5;241m=\\u001B[39mMeanSquaredError(), epochs\\u001B[38;5;241m=\\u001B[39m\\u001B[38;5;241m1000\\u001B[39m, nesterov \\u001B[38;5;241m=\\u001B[39m \\u001B[38;5;241m0.9\\u001B[39m,\\n\\u001B[1;32m----> 7\\u001B[0m                     callbacks\\u001B[38;5;241m=\\u001B[39m[\\u001B[43mL2\\u001B[49m])\\n\",\r\n      \"\\u001B[1;31mNameError\\u001B[0m: name 'L2' is not defined\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"model = Network(9)\\n\",\r\n    \"model.add_layer(16, ReLU())\\n\",\r\n    \"model.add_layer(8, ReLU())\\n\",\r\n    \"model.add_layer(2, Sigmoid())\\n\",\r\n    \"\\n\",\r\n    \"stats = model.train((x_train, y_train), (x_val, y_val), metric=MeanEuclideanError(), loss=MeanSquaredError(), epochs=1000, nesterov = 0.9,\\n\",\r\n    \"                    callbacks=[])\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [\r\n    \"fig, axs = plt.subplots(1, 2, figsize=(15, 5))\\n\",\r\n    \"\\n\",\r\n    \"sns.lineplot(stats['train_loss'], ax=axs[0])\\n\",\r\n    \"sns.lineplot(stats['val_loss'], ax=axs[0])\\n\",\r\n    \"sns.lineplot(stats['train_acc'], ax=axs[1])\\n\",\r\n    \"sns.lineplot(stats['val_acc'], ax=axs[1])\\n\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"pycharm\": {\r\n     \"is_executing\": true\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 0\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/notebooks/tests.ipynb b/notebooks/tests.ipynb
--- a/notebooks/tests.ipynb	
+++ b/notebooks/tests.ipynb	
@@ -231,7 +231,7 @@
     "model.add_layer(8, ReLU())\n",
     "model.add_layer(2, Sigmoid())\n",
     "\n",
-    "stats = model.train((x_train, y_train), (x_val, y_val), metric=MeanEuclideanError(), loss=MeanSquaredError(), epochs=1000, nesterov = 0.9,\n",
+    "stats = model.train((x_train, y_train), (x_val, y_val), metric=MeanEuclideanError(), loss=MeanSquaredError(), epochs=1000, nesterov = 0.5,\n",
     "                    callbacks=[])"
    ],
    "metadata": {
@@ -240,8 +240,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "outputs": [],
+   "execution_count": 26,
+   "outputs": [
+    {
+     "data": {
+      "text/plain": "<AxesSubplot: >"
+     },
+     "execution_count": 26,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "text/plain": "<Figure size 1500x500 with 2 Axes>",
+      "image/png": "\n"
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "fig, axs = plt.subplots(1, 2, figsize=(15, 5))\n",
     "\n",
Index: .idea/neural-network-from-scratch.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"PyDocumentationSettings\">\r\n    <option name=\"format\" value=\"PLAIN\" />\r\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\r\n  </component>\r\n</module>
===================================================================
diff --git a/.idea/neural-network-from-scratch.iml b/.idea/neural-network-from-scratch.iml
--- a/.idea/neural-network-from-scratch.iml	
+++ b/.idea/neural-network-from-scratch.iml	
@@ -10,5 +10,6 @@
   <component name="PyDocumentationSettings">
     <option name="format" value="PLAIN" />
     <option name="myDocStringFormat" value="Plain" />
+    <option name="renderExternalDocumentation" value="true" />
   </component>
 </module>
\ No newline at end of file
